## 4.3 数据升级：从简单列表到对象集合 {#sec-data-managing}

> “真正重要的东西，是眼睛看不到的。你需要用心去感受。” —— 在编程中，“类”就是那个需要我们用心设计的、眼睛看不到的结构。

我们在上一节拥有了第一个“容器”`ArrayList`，但很快就发现了新的局限性：`ArrayList<String>`只能存储一连串孤立的文本（比如名字），但一个真正的联系人，应该包含**姓名**和**电话号码**这两项关联信息。

我们该如何将这两项信息**“打包”**成一个不可分割的整体呢？这听起来是不是很熟悉？没错，这正是第二章中`class`的用武之地！

### 第一部分：设计我们自己的数据类型

::: {.callout-note title="与AI的对话：创建Contact“数据蓝图”"}

**你**：AI，我的`ArrayList<String>`只能存名字，但我需要把每个人的电话号码也存进去。我总不能创建两个列表，一个存名字，一个存电话吧？那样太容易搞混了。

**AI助手**：你提出了一个关键的设计问题！创建两个列表确实是糟糕的设计。面向对象编程的思想告诉我们，应该将描述同一个实体的数据封装在一起。所以，我们不应该分开存储，而是要设计一个自定义的数据类型，专门用来代表“联系人”这个实体。

**你**：自定义数据类型？听起来很高级。

**AI助手**：其实你已经做过了！在第二章，我们创建的`Pet`类，本质上就是我们自定义的一种数据类型。现在，我们再来一次，创建一个`Contact`类，把它作为“联系人”的**数据蓝图**。它应该包含`name`和`phoneNumber`两个属性。

**你**：好的，请帮我生成这个`Contact`类，并提供构造方法和访问数据的方法。

**AI助手**：当然。我还建议为它添加一个`toString()`方法，这个小技巧能让你的调试和打印过程变得非常愉快。

```java
// 在一个新文件 Contact.java 中
public class Contact {
    private String name;
    private String phoneNumber;

    // 构造方法，用于创建新的Contact对象
    public Contact(String name, String phoneNumber) {
        this.name = name;
        this.phoneNumber = phoneNumber;
    }

    // Getter方法，用于从外部安全地获取数据
    public String getName() {
        return name;
    }

    public String getPhoneNumber() {
        return phoneNumber;
    }

    // 重写toString()方法，决定了Contact对象被打印时的样子
    @Override
    public String toString() {
        return "联系人{" +
               "姓名='" + name + '\'' +
               ", 电话='" + phoneNumber + '\'' +
               '}';
    }
}
```
:::

#### 核心概念：作为“数据蓝图”的Class
通过`class Contact {...}`，我们不再仅仅是创建一个普通的类，我们是在**定义一个全新的数据类型**。从此，在我们的程序中，`Contact`和`String`、`int`一样，都成为了一种合法的、可用的类型。它完美地匹配了我们的业务需求，这正是`class`强大的威力所在。

---

### 第二部分：对象集合与`for-each`循环

有了`Contact`蓝图，我们现在可以轻松地创建出具体的“联系人对象”了。那么，如何把这些对象装进我们的“魔法购物袋”`ArrayList`并展示出来呢？

::: {.callout-note title="与AI的对话：遍历对象列表"}
**你**：我创建好`Contact.java`了。现在，我的`ArrayList`能装下这些`Contact`对象吗？

**AI助手**：当然可以！`ArrayList`的“魔法”就在于它的泛型。你只需要在创建时，把“契约”从`<String>`改成`<Contact>`，这个“购物袋”就变成了专门存放`Contact`对象的收纳盒。

**你**：太好了！那我添加了几个联系人之后，该如何把它们逐个打印出来，而不是显示一个长长的、方括号括起来的列表？

**AI助手**：问到了关键点！为此，Java提供了一种极其优雅的循环，专门用来“走过”集合中的每一个元素，它叫 **`for-each`循环**。它的语法读起来就像自然语言：“对于 `contacts` 列表中的 **每一个** `Contact` 对象，我们把它临时叫做 `contact`，然后对它做点事。”

```java
// 在你的主程序中 (例如 AddressBook.java)
import java.util.ArrayList;

public class AddressBook {
    public static void main(String[] args) {
        // 1. 创建一个只能存放Contact对象的ArrayList
        ArrayList<Contact> contacts = new ArrayList<>();

        // 2. 创建几个Contact实例并添加进列表
        contacts.add(new Contact("孙悟空", "188****8888"));
        contacts.add(new Contact("猪八戒", "155****5555"));
        
        // 3. 使用 for-each 循环遍历列表
        System.out.println("--- 📖 我的通讯录 ---");
        for (Contact contact : contacts) {
            // 在循环内部，contact变量就代表当前正在访问的那个对象
            // 我们可以调用它的getter方法来获取信息
            System.out.println("姓名: " + contact.getName() + 
                               ", 电话: " + contact.getPhoneNumber());
        }
    }
}
```
:::

#### 核心概念：优雅的`for-each`循环

`for (Contact contact : contacts)` 这种语法，是处理集合数据的首选。它向你隐藏了所有关于索引、计数和边界检查的繁琐细节，让你能完全专注于**“对集合中的每一个元素，我具体要用它来做什么”**这个核心问题上，代码更简洁，也更不易出错。

### 动手实践

现在，你已经掌握了创建“迷你通讯录”的全部核心技术。是时候把它们整合起来了。

1.  **创建`Contact.java`**：根据AI的建议，在你的项目中创建一个新的`Contact.java`文件，并把代码粘贴进去。
2.  **改造主程序**：回到你的主程序文件（比如`AddressBook.java`或你之前创建的其他文件）。
3.  **与AI协同编码**：向AI描述你的最终目标：
    *   “请帮我把我之前创建的`ArrayList<String>`，改造成一个`ArrayList<Contact>`。”
    *   “请帮我向这个新的列表中添加2-3个我自己虚构的`Contact`对象实例。”
    *   “请帮我使用`for-each`循环，遍历整个列表，并像示例中那样，将每个联系人的姓名和电话号码都清晰地打印在单独的一行上。”

完成这个练习，你的第一个真正有用的、管理着结构化数据的Java程序就诞生了！