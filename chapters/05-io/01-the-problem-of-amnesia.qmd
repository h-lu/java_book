## 5.1 程序的“失忆症” {#sec-io-amnesia}

> “记忆是万物的宝库和卫士。” —— 西塞罗

让我们回顾一下上一章的“迷你通讯录”项目。你已经可以熟练地使用 `ArrayList` 来添加、删除和遍历联系人了。你的程序在**运行时**表现得非常完美。

但是，请尝试以下操作：

1.  运行你的 `MiniAddressBook.java` 程序。
2.  （在程序内部）添加几个新的联系人。
3.  停止程序。
4.  再次运行程序。

你会发现什么？

没错，所有你在上一次运行时添加的联系人信息，全都消失了！`ArrayList` 被重置成了一个空列表。

### 为什么会这样？内存与硬盘

要理解这个问题，我们需要了解计算机存储数据的两个主要地方：**内存 (RAM)** 和 **硬盘 (Hard Drive/SSD)**。

*   **内存 (RAM)**：可以把它想象成你大脑中的**短期记忆**，或者是你书桌的**桌面**。它读写速度极快，程序运行时，所有的变量、对象（包括我们的 `ArrayList`）都存放在这里，方便快速访问和修改。但它的缺点是**易失性 (Volatile)**——一旦断电（或者程序关闭），内存里的所有数据都会被清空。就像你关灯睡觉后，短期记忆会变得模糊；或者一天工作结束，你会把桌面清空一样。

*   **硬盘 (Hard Drive/SSD)**：这相当于你大脑的**长期记忆**，或者是你的**文件柜**。它的读写速度比内存慢得多，但优点是**持久性 (Persistent)**——即使断电，存放在硬盘上的文件也会永久保留，直到你主动删除它们。

我们目前的程序，所有的数据都只存在于内存中。这就是它患上“失忆症”的根本原因。

> **你**：我的通讯录程序一关掉，数据就全没了。我怎样才能让它把数据“记住”，下次打开时还能看到？
>
> **AI助手**：这是一个非常关键的问题，它标志着你从编写“玩具”程序向编写“有用”程序的转变。要让数据存活下来，你需要将它们从内存写入到硬盘上的**文件**里。这个过程我们称为**文件输出 (File Output)**。
>
> 当程序再次启动时，你需要反向操作：从文件中读取数据，然后加载回内存的 `ArrayList` 中。这个过程我们称为**文件输入 (File Input)**。
>
> 合起来，就是**文件I/O（Input/Output）**。这是几乎所有应用程序都必须具备的核心功能。准备好学习如何操作文件了吗？

现在，问题已经非常明确：为了治好程序的“失忆症”，我们必须学会如何将内存中的 `ArrayList` 数据写入硬盘上的文件，并在需要时再把它读回来。下一节，我们将从“写文件”开始。