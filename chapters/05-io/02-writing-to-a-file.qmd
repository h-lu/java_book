## 5.2 数据输出：向文件写入第一行日记 {#sec-io-writing}

> “言语一旦被写下，就拥有了生命。” —— 我们将赋予程序创造这种生命的能力。

根据上一节制定的计划，我们“电子日记本”的第一个任务，就是学会如何将一行字符串，比如“今天天气真好！”，写入到硬盘上的一个文件里。

::: {.callout-note title="与AI的对话：打开通往文件的“管道”"}

**你**：AI，我想把“今天天气真好！”这句话存进一个叫`diary.txt`的文件里。在Java里，我应该使用什么工具？

**AI助手**：很好的问题！要向文件里写东西，最经典、最直接的工具之一是`FileWriter`。你可以把它想象成一根**连接你的程序和目标文件的“水管”**。你通过程序把数据“倒”进水管的一端，它就会流到另一端的文件里。

**你**：听起来很形象。那该如何使用这个`FileWriter`？

**AI助手**：你需要三步：**打开管道、写入数据、关闭管道**。代码大致是这样的：

```java
// 这是一个初步的、不完整的代码示例
import java.io.FileWriter;

// ... 在你的主方法里 ...

// 1. 打开通往 "diary.txt" 的管道
// 第二个参数 `true` 非常重要，它代表“追加模式”
// 如果没有它，每次写入都会覆盖文件的旧内容
FileWriter writer = new FileWriter("diary.txt", true);

// 2. 将你的日记内容写入管道
writer.write("今天天气真好！\n"); // \n 是换行符，让每条日记占一行

// 3. 关闭管道，确保所有数据都被真正“冲刷”到文件里
writer.close(); 
```
**你**：等等，我照着你的代码敲，但是我的AI编辑器在`new FileWriter(...)`和`writer.write(...)`下面都画上了红色的波浪线！它提示有一个“未处理的异常：`java.io.IOException`”。这是什么意思？

**AI助手**：恭喜你！你刚刚遇到了Java语言一个非常独特且重要的安全特性——**受查异常 (Checked Exception)**。

:::

### 核心概念：必须处理的“意外”——受查异常

你的AI编辑器之所以“报错”，不是因为你的代码写错了，而是Java在强制提醒你：**“你正在做的这件事（文件操作）是有风险的！”**

想一想，写文件时可能发生多少意外？
*   文件所在的磁盘可能已经满了。
*   你可能没有权限在那个位置创建或修改文件。
*   硬盘可能突然坏掉了。

如果对这些潜在的“意外”不做任何准备，程序就会在用户面前崩溃，非常不友好。Java的设计者认为，这类可预见的风险，程序员**必须**在代码中明确地给出处理方案。

最常见的处理方案，就是使用`try-catch`语句块，把它理解成一个“应急预案”。

*   **`try` 块**：把你认为**可能出问题的、“有风险的”**代码，都放进`try`的大括号里。程序会“尝试”执行它们。
*   **`catch` 块**：如果在`try`块的执行过程中真的发生了意外（比如抛出了一个`IOException`），程序不会崩溃，而是会立刻跳转到`catch`块中，执行你在里面准备好的“补救措施”，比如打印一条友好的错误信息。

现在，让我们用`try-catch`来完善刚才的代码：

```java
import java.io.FileWriter;
import java.io.IOException; // 需要导入IOException类

public class DiaryWriter {
    public static void main(String[] args) {
        try {
            // --- 把所有危险操作都放进 try 块 ---
            FileWriter writer = new FileWriter("diary.txt", true);
            writer.write("今天天气真好！\n");
            writer.close();
            System.out.println("日记已成功写入。");

        } catch (IOException e) {
            // --- 如果 try 中发生IO异常，就在这里处理 ---
            System.out.println("写入日记时发生错误！");
            e.printStackTrace(); // 这会打印出详细的错误信息，方便调试
        }
    }
}
```
看到吗？加上`try-catch`后，代码的红线就消失了。我们向Java编译器承诺：“我考虑过风险了，并准备了预案。” 这就是Java代码健壮性的体现。

### 动手实践

你已经掌握了最核心的文件写入和异常处理知识。现在，把它们和你之前学过的`Scanner`结合起来，完成一个真正有用的功能。

**目标**：创建一个程序，它会提示用户输入一行日记，然后将用户输入的内容，追加写入到`diary.txt`文件中。

**与AI协同的步骤**：

1.  **准备基本结构**：向AI提问：“请帮我创建一个包含`main`方法的`MyDiary.java`文件，并设置好一个基本的`try-catch`结构来捕获`IOException`。”
2.  **获取用户输入**：在`try`块的开头，向AI提问：“我如何使用`Scanner`来提示用户‘请输入今天的日记：’并获取他输入的整行内容？”
3.  **写入文件**：
    *   继续提问：“我如何使用`FileWriter`在追加模式下打开`diary.txt`？”
    *   “如何将我刚刚用`Scanner`获取到的那行日记，写入到文件中？记得要在末尾加上一个换行符。”
    *   “最后，我该如何关闭`FileWriter`？”
4.  **运行与验证**：运行你的程序，输入一两句日记。然后检查你的项目文件夹下是否出现了一个`diary.txt`文件，打开它，看看内容是否和你输入的一致。

完成这个练习，你的程序就拥有了最基本的“记忆”能力。