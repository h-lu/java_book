---
title: "第五章：程序的记忆——文件输入与输出"
---

> “一张纸的耐心，远超过任何人。” —— 安妮·弗兰克

在上一章，我们的“迷你通讯录”学会了如何组织和管理数据，但它依然有个致命的缺陷——“失忆症”。程序一旦关闭，所有联系人都将灰飞烟灭，因为它们都只存在于计算机临时的内存中。

要让我们的程序拥有真正的“记忆”，就必须学会一项古老而强大的技能：**将数据写入到计算机的硬盘文件中**，并在需要时再把它们读出来。这个过程，我们称之为**文件输入/输出（File I/O）**。

本章，我们将为程序安装上这颗“记忆芯片”，让它学会写日记，并永远保存那些珍贵的记录。

::: {.callout-note title="开启本章学习"}

#### 📖 本章微项目

创建一个可以永久保存和读取日记条目的**“电子日记本”**。

#### 💎 核心概念

-   **文件写入 (`FileWriter`)**：学习如何打开一个文件“流”，并将程序中的字符串数据写入到硬盘上的文件中。
-   **文件读取 (`Scanner`)**：我们将再次利用强大的`Scanner`，这次不是读取键盘，而是读取整个文件的内容。
-   **异常处理 (`try-catch`)**：与外部文件交互是充满“意外”的（文件可能不存在、硬盘可能满了）。我们将学习Java中处理这些意外的优雅机制——`try-catch`块。
-   **路径与`File`对象**：理解如何在代码中表示一个文件路径，并使用`File`类来操作文件本身。

#### 🤖 AI协同重点

-   **处理“受查异常”**：在进行文件操作时，你的AI编程助手会“强制”你处理可能发生的`IOException`。这将是你第一次接触Java独特的“受查异常”体系，你需要学习如何与AI协作来编写更健壮的代码。
-   **资源管理最佳实践**：当你向AI提问“如何确保文件在使用后总是被正确关闭？”时，它可能会向你介绍一个更高级但非常重要的语法——`try-with-resources`。这是学习代码最佳实践的绝佳机会。

:::

准备好让你的程序拥有超越内存的、永恒的记忆了吗？让我们开始吧。
