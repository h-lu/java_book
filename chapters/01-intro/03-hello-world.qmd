## 1.3 第一次代码实践：`Hello, World!` {#sec-intro-hello-world}

> “纸上得来终觉浅，绝知此事要躬行。” — 陆游

环境就绪，现在，是时候指挥AI，写下我们与程序世界的第一次“正式沟通”了。我们将从编程界的经典传统——`Hello, World!`——开始，但会用一种全新的、AI协同的方式来完成它。

::: {.callout-note title="与AI的对话：生成并运行你的第一个程序"}

**你**：AI你好，我已经准备好了。我想开始写代码了。

**AI助手**：太棒了！让我们开始吧。首先，你需要一个文件来存放你的代码。我们可以创建一个名为 `Greeter.java` 的文件。

**你**：好的。现在在这个文件里，请帮我生成一个完整的Java程序。这个程序只需要做一件事：在屏幕上打印出“你好, 世界!”这行字。

**AI助手**：没问题。这是一个标准的Java程序，用于在控制台打印“你好, 世界!”。我已经将代码生成在 `Greeter.java` 中。

```java
// 这是AI生成的代码
public class Greeter {

    // 这是程序的入口点，叫做 main 方法
    public static void main(String[] args) {
        
        // 这行代码负责在控制台（屏幕）上打印文本
        System.out.println("你好, 世界!");
        
    }
    
}
```
我还在代码里为你添加了注释，来解释每一部分的作用。现在，请找到 `main` 方法旁边那个绿色的“播放”按钮，然后点击它。

**你**：我点击了，在下面的终端窗口看到了“你好, 世界!”。成功了！

**AI助手**：祝贺你！这不仅仅是打印了一行字，你刚刚完成了一次完整的AI协同编程循环：**提出想法 -> 指挥AI -> 验证结果**。这是现代编程的核心技能。
:::

### AI辅助的代码探索

现在，你可能对AI生成的代码感到好奇。`public class Greeter` 是什么？`static void main` 又是什么意思？

此刻，你**不需要**深入理解每一个词的精确含义。最好的学习方式，就是继续利用你的AI伙伴。

::: {.callout-tip title="自己动手问问AI"}
尝试在编辑器里选中 `public static void main(String[] args)` 这一整行代码，然后向AI提问：

> “请用一个初学者能懂的比喻，解释这行代码是做什么的？”

:::

看看AI会如何为你解答。通过这种“边做边问”的方式，你将逐步构建起对Java程序结构的理解。

我们已经完成了“打印固定文字”这个任务。但我们的最终目标是“个性化问候器”，这意味着程序需要能处理像“Alice”这样的可变信息。这，就是我们下一节要挑战的核心内容。

---

### 动手练习

1.  **个性化你的问候**：修改 `System.out.println()` 中的字符串，将 `"你好, 世界!"` 改成 `"你好, [你的名字]!"`。再次运行程序，看看输出有什么不同。
2.  **多说几句**：在现有的 `System.out.println()` 下方，再添加一行同样的代码，但打印不同的内容，比如 `"这是我的第一个Java程序!"`。运行程序，观察终端的输出。
3.  **向AI提问**：选中 `System.out.println` 这部分代码，问问AI：“除了`println`，还有别的方法可以打印信息吗？有什么区别？” 看看AI会告诉你什么。
