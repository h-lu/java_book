## 1.4 让程序拥有记忆：变量与静态类型 {#sec-intro-static-typing}

> “无规矩不成方圆。” — 孟子

在上一节，我们成功地让程序打印出了固定的文字。现在，我们要解决“个性化问候器”的核心挑战：如何让程序“记住”一个名字，比如“Alice”，并将其用在问候语中？

要让程序拥有记忆，我们就需要一个可以存放信息的地方。在编程中，这个“地方”被称为**变量 (Variable)**。让我们直接向AI提问，看看如何实现我们的需求。

::: {.callout-note title="与AI的对话：引入变量与理解类型"}

**你**：你好AI，在 `Greeter.java` 里，我不想只打印“你好, 世界!”。我想让它能记住一个名字，比如“Alice”，然后打印出“你好, Alice!”。我该怎么做？

**AI助手**：这是一个非常关键的进步！要实现这个功能，你需要学习使用**变量**。你可以把变量想象成一个贴了标签的“盒子”，我们可以把信息放进去。

为了实现你的需求，代码需要做两处小修改：
1.  我们需要一个专门存放文本的“盒子”。
2.  我们需要在打印时，把“盒子”里的内容取出来。

这是修改后的代码：
```java
public class Greeter {
    public static void main(String[] args) {
        
        // 1. 声明一个名为 name 的“盒子”，并规定它只能存放 String（文本）
        String name = "Alice";
        
        // 2. 打印时，使用 + 号将固定文本和“盒子”里的内容拼接起来
        System.out.println("你好, " + name + "!");
        
    }
}
```

**你**：我注意到 `=` 左边多了一个 `String`，这是什么意思？不能直接写 `name = "Alice";` 吗？

**AI助手**：问得非常好！这个 `String` 正是Java最核心的特性之一：**静态类型**。

它就像一个**契约**。`String name;` 这部分的意思是：“我在此郑重声明，我需要一个名为 `name` 的盒子，并且我保证，这个盒子里以后**永远只存放文本（String）**。”

这个“提前约定”的规矩，就是“静态”的含义。一旦约定好了，如果你试图往盒子里放别的东西，比如一个数字 `name = 123;`，我（你的AI伙伴）和Java编译器会立刻告诉你：“违约了！类型不匹配！” 这能**在代码运行前就帮你发现大量的潜在错误**，是Java如此稳定和可靠的关键原因。

**你**：原来如此，这就像给每个盒子贴上了固定用途的标签，更安全了。

**AI助手**：完全正确！这种安全性，我们称之为**类型安全 (Type Safety)**。它能让代码更清晰，也让我能给你提供更精准的代码提示。现在，试试运行一下新代码吧！
:::

### 概念提炼：变量与静态类型

*   **变量 (Variable)**：一个可变的、用来存储数据值的“容器”或“盒子”。
*   **静态类型 (Static Typing)**：在声明一个变量时，必须明确指定它能存储的数据类型（如 `String`、`int`），且之后不能更改。这是一种在编译期（运行前）就能保证类型安全的机制。

### 动手练习

现在，请在你的`main`方法中，故意犯一些“类型错误”，然后观察你的AI编辑器是如何实时提示你的。这是学习与AI协同解决问题的最佳方式！

1.  声明一个`int`类型的变量，然后尝试把一段文本（比如 `"Hello"`）赋值给它。
2.  向你的AI助手提问："如何修复这个类型不匹配的错误？"
3.  看看AI会如何建议你。

这个练习将让你深刻体会到，在Java的世界里，AI是如何利用静态类型系统成为你的守护者和向导的。