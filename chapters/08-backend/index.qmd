---
title: "第八章：构建后端服务 —— API与业务逻辑"
---

> “程序是写给人读的，只是偶尔让计算机执行一下。” —— Hal Abelson

欢迎来到第八章！在上一章，我们像专业的建筑师一样，为 `IntelliRecommend` 项目备好了所有的建筑工具（Git和Maven）。现在，是时候戴上安全帽，开始浇筑我们应用的核心——**后端服务 (Backend Service)** 了。

如果把一个应用想象成一家餐厅，那么**前端 (Frontend)** 就是你看到的餐厅大堂和菜单，而**后端 (Backend)** 则是那家餐厅繁忙的“后厨”，它负责处理所有核心业务：处理点单（接收请求）、烹饪菜肴（业务逻辑）、管理库存（操作数据库）。

::: {.callout-note title="与AI的对话：开启“后厨”的工作"}

**你**：AI，我们已经搭建好了项目框架。现在要开始做“后厨”了，听起来好复杂。我们从哪儿开始呢？

**AI助手**：问得好！我们不用从零开始砌灶台。我们将使用一个叫 **Spring Boot** 的“整体厨房”神器。它已经把所有基础设施都准备好了，我们只需要专注于“烹饪”我们的第一道“招牌菜”——一个可以返回信息的 **API 接口**。你可以把它想象成后厨的第一个“出菜口”。

:::

### 本章项目任务
使用颠覆性的 **Spring Boot** 框架，为`IntelliRecommend`项目构建第一个Web API接口。这个接口将使我们的Java程序第一次能够通过浏览器被访问，并返回一段欢迎信息或一个简单的数据列表。

### 本章Java技术重点
1.  **Spring Boot入门**：理解其“约定优于配置”的核心理念，学习如何通过添加“Starters”依赖，将Spring Boot无缝集成到我们现有的Maven项目中。
2.  **REST API基础**：学习什么是API（应用程序接口），以及`@RestController`和`@GetMapping`这两个核心注解是如何将一个普通的Java方法，瞬间变为一个能通过网络访问的服务接口。
3.  **【Java特性凸显】注解驱动开发**：你将深入体会以`@`注解为核心的声明式编程范式。相比于复杂的代码实现，我们更多地是通过注解来“声明”一个类的用途或一个方法的行为。这让代码的“意图”变得极其清晰，完美诠释了本章开头的名言，也是现代Java企业级开发的标志。

### AI协同实践
你将学习如何更高效地指挥AI完成后端开发任务：

*   向AI描述你想要的功能，而不是具体实现：“**我需要把我的项目变成一个Web应用，应该添加哪个Spring Boot Starter？**”
*   让AI为你生成代码骨架：“**请给我一个最简单的Spring Boot主应用类。**”
*   描述你想创建的API，让AI为你生成Controller：“**我想要一个能响应`/api/hello`路径的GET请求的API，让它返回字符串‘Hello, IntelliRecommend!’**”

准备好了吗？让我们点燃 `IntelliRecommend` 项目后厨的第一个炉灶！ 