## 8.4 总结：你现在是API工程师了 {#sec-backend-summary}

> “API是数字世界的握手。”

太棒了！在本章，你完成了一次质的飞跃：从一个只能编写本地程序的开发者，成长为一位能够构建**网络服务**的后端工程师。你写的代码现在可以通过HTTP协议被全世界任何地方的客户端访问，这为你打开了一个全新的世界。

::: {.callout-note title="与AI的对话：复盘你的后端开发能力"}

**你**：AI，这一章我们写了不少API，感觉收获巨大。你能帮我系统地梳理一下，我们到底掌握了哪些后端开发的核心技能吗？

**AI助手**：当然！你现在已经拥有了一套迷你但完整的后端开发技能栈：

1.  **掌握了后端王者Spring Boot**：你不仅理解了它“约定优于配置”的核心思想，还亲手将一个普通Maven项目改造为了功能完备的Spring Boot应用。

2.  **构建了完整的CRUD API**：你不再只会返回简单的“Hello, World!”。你已经能够围绕一个业务模型（`Content`类），实现增（`@PostMapping`）、删（`@DeleteMapping`）、改（`@PutMapping`）、查（`@GetMapping`）一整套API。这是所有业务系统的基础。

3.  **理解了关键Web注解**：你掌握了`@RestController`、`@GetMapping`、`@PostMapping`等一系列将普通Java方法“点石成金”变为网络接口的强大注解，并理解了如何使用`@PathVariable`和`@RequestBody`来处理不同的入参。

4.  **学会了使用API测试工具**：你知道了浏览器的局限性，并掌握了使用专业工具（如Postman）来测试GET、POST等不同HTTP请求的方法。

你已经搭建起了后端知识体系的“四梁八柱”，为后续学习数据库、安全等更高级的主题做好了充分的准备。

:::

### 核心概念融通：分层与职责

在本章，我们创建了`Content`（模型）和`ContentController`（控制器）。你可能已经隐约感觉到，它们各司其职：一个负责定义数据长什么样，一个负责处理外部请求。

这就是软件工程中最重要的思想之一：**分层（Layering）与单一职责原则（Single Responsibility Principle）**。在未来，我们还会引入`Service`层（处理复杂业务逻辑）和`Repository`层（专门与数据库交互）。每一层都只做自己最擅长的事，这使得我们的代码结构清晰、易于维护和扩展。

### 承上启下：让数据真正“落地”

我们目前实现的CRUD API有一个“致命”的缺点：所有数据都存储在内存的`ArrayList`中，只要程序一重启，所有新增和修改过的数据都会**全部丢失**。

这在真实世界中是完全不可接受的。为了让我们的数据能够被**持久化（Persistence）**，在下一章，我们将学习如何将Spring Boot与数据库连接起来。你将学习到JPA（Java Persistence API）和Spring Data JPA这两个强大的工具，它们能让你用极其简单的方式，通过Java对象来操作数据库中的数据，彻底告别繁琐的SQL语句。

准备好让你的数据真正“落地生根”了吗？请先完成本章的最终挑战。

---

### 最终挑战：深化你的后端视野

我们目前只打开了Spring Boot世界的一扇小门。下面是一些能让你深入理解其背后机制的好问题，试着和你的AI伙伴一起找到答案吧。这个挑战旨在锻炼你自主探索和解决高级问题的能力。

1.  **Controller的两种形态**：

    > **向AI提问**：“AI，我使用了`@RestController`，但好像还有一个类似的注解叫`@Controller`。它们有什么区别？在什么情况下我应该使用`@Controller`？”

2.  **数据库的权衡**：

    > **向AI提问**：“AI，我们现在用的是`ArrayList`来模拟数据库，它很简单，但数据易失。在真实开发中，像H2这样的内存数据库和像MySQL这样的持久化数据库相比，各有什么优缺点？我们通常在什么阶段会使用内存数据库？”

3.  **更优雅的URL设计**：

    > **向AI提问**：“AI，我在`ContentController`里的所有`@GetMapping`、`@PostMapping`上都写了以`/api/contents`开头的路径。有没有办法把这个公共的前缀提取出来，让代码更简洁？”
    >
    > (提示：探索在Controller**类**上使用`@RequestMapping`注解。)

4.  **项目监控的“隐藏菜单”**：

    > **向AI提问**：“AI，我的同事说Spring Boot自带一个很强大的监控功能叫Actuator。它是什么？我如何在项目中启用它，并访问它的端点（endpoints）来查看应用的健康状况和信息？”
    >
    > (提示：添加`spring-boot-starter-actuator`依赖。)