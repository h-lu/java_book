## 3.1 任务发布：“猜数字”小游戏 {#sec-control-task}

> “凡事都有偶然的凑巧，结果却又如宿命的必然。”

欢迎来到第三章！在这一章，我们将构建一个非常经典的入门项目——“猜数字”小游戏。

到目前为止，我们的程序都是“一条道走到黑”的。但一个真正的程序，必须拥有“大脑”，它需要能根据不同的情况做出不同的选择，或者重复执行某个任务直到达成目标。

这个“猜数字”游戏，就是我们训练程序“思考”能力的绝佳靶场。让我们直接和AI探讨一下，如何将这个游戏想法，转化为程序可以理解的逻辑。

::: {.callout-note title="与AI的对话：分解我们的游戏规则"}

**你**：你好AI，我想用Java做一个“猜数字”游戏，你能帮我理一下思路吗？

**AI助手**：当然可以！这是一个很棒的项目，能让我们把编程的核心逻辑都练习一遍。我们先把游戏规则用“程序员的思维”分解一下：

1.  **游戏开始前，程序需要做什么？**
    *   它得先在心里悄悄想好一个秘密数字。为了让游戏每次都不同，这个数字应该是**随机**的。
    *   **对应的技术点**：我们需要一个能生成随机数的工具，在Java里，这通常由`Random`类来完成。

2.  **游戏进行中，程序需要做什么？**
    *   它应该能**持续地**让玩家猜，直到猜对为止。这个“持续地”，在编程里就是一个**循环**。
    *   **对应的技术点**：我们会用到`while`循环语句，来创建一个“只要没猜对，就一直继续”的游戏循环。

3.  **在每一轮循环里，程序需要做什么？**
    *   首先，它得能**读取**到玩家从键盘输入的数字。
    *   **对应的技术点**：我们会使用一个名为`Scanner`的工具来获取用户的输入。
    *   然后，它需要拿玩家猜的数字和秘密数字进行**比较和判断**。
    *   **对应的技术点**：这正是`if-else`条件语句的用武之地。我们需要三种判断：猜大了、猜小了、猜对了。

**你**：这个分解很清晰！我们把一个游戏，拆解成了`Random`、`while`、`Scanner`和`if-else`这几个核心的技术问题。

**AI助手**：完全正确！这就是**计算思维**：**将一个复杂问题，分解成若干个更小的、可以用代码解决的子问题**。现在，你已经有了清晰的路线图。我们可以从最核心的“判断”逻辑，也就是`if-else`开始，一步步构建我们的游戏。
:::

### 你的新角色：逻辑设计师

通过上面的对话，你的角色再次发生了转变。你不仅仅是代码的“指挥家”，你更是游戏流程和程序逻辑的“设计师”。

在动手写代码之前，先和AI一起，把“做什么”和“按什么顺序做”想清楚，这是专业开发与业余开发的根本区别。

现在，任务已经明确，路线图也已规划好。让我们从第一步开始，让程序学会做“判断题”。 