## 3.4 程序的“输入”：随机数与玩家猜测 {#sec-control-random-scanner}

> "兵无常势，水无常形。" —— 战争和程序一样，真正的魅力在于应对无穷的变量。

我们上一节打造的循环逻辑非常完美，但整个游戏却像一出“剧本已经写好”的戏剧，毫无惊喜。为什么呢？

*   **秘密数字是固定的**：`int targetNumber = 42;` 这行代码让秘密数字毫无“秘密”可言。
*   **玩家的猜测也是固定的**：我们用 `int playerGuess = 50;` 来模拟猜测，玩家根本没有参与感。

要让游戏活起来，就必须打通程序与“外部世界”的两个关键通道：一个是**不可预测的随机性**，另一个是**来自玩家的真实互动**。

::: {.callout-note title="与AI的对话：为游戏注入“灵魂”"}

**你**：AI，我的游戏太无聊了，答案永远是42。我怎么能让程序在每次运行时，都自动想一个1到100之间的、不一样的秘密数字呢？

**AI助手**：问得好！要创造“不可预测性”，你需要一个随机数生成器。Java的标准库里恰好有一个强大的工具：`Random`类。你可以先把它理解成一个“摇骰子”的机器人。

**你**：听起来很酷！那我怎么让这个“机器人”帮我摇出一个数字？

**AI助手**：很简单，你只需要两步：
1.  用 `new Random()` 命令把它“造”出来。
2.  命令它执行 `.nextInt(100)`，它就会给你一个0到99之间的随机整数。我们再加1，就完美地得到了1到100的范围。

**你**：太棒了！那玩家输入呢？我怎么才能让程序停下来，等我用键盘输入我猜的数字？

**AI助手**：这需要另一个“机器人”出场，它叫 `Scanner`，是Java里专门用来读取键盘输入的工具。它的工作方式和 `Random` 类似：
1.  用 `new Scanner(System.in)` 把它造出来，告诉它要“扫描”键盘。
2.  在循环里，命令它执行 `.nextInt()`，它就会在那里静静地等待，直到你输入一个数字并按下回车。

:::

### 核心概念提炼：与外部世界的“接口”

`Random`和`Scanner`是我们接触到的第一批由Java官方提供的、功能强大的“工具类”。要使用它们，你需要理解三个核心步骤，这也适用于将来你会遇到的无数新工具：

1.  **`import` (导入)**：`Random` 和 `Scanner` 都不在我们的主文件中，它们住在Java庞大的“标准工具库”(`java.util`)里。`import java.util.Random;` 这行代码就像是在项目开始前，明确告诉编译器：“嘿，我待会儿要用到那个叫`Random`的工具，你先去仓库里帮我把它找出来准备好。”

2.  **`new` (创建实例)**：仅仅导入了工具的“图纸”还不够，我们必须按照图纸把它真正“制造”出来才能使用。`Random random = new Random();` 就是在内存中创建了一个实实在在的、能够为我们工作的`Random`对象（一个实例）。

3.  **`.` (调用方法)**：一旦有了对象，我们就可以通过 `.` 这个符号，向它下达指令，让它执行自身具备的“能力”（即方法）。`random.nextInt(100)` 就是在命令`random`这个对象，去执行它“生成下一个整数”的功能。

### 动手实践与挑战：组装完整游戏

现在，你已经拥有了让游戏变得完整的所有拼图。

1.  **向AI提问**：“请帮我把`Random`生成随机数和`Scanner`读取玩家输入的逻辑，整合到我之前的`GuessingGame`的`while`循环代码中，形成一个可以完整玩的游戏。”
2.  运行你的完整版游戏，体验一下真正的互动流程！

::: {.callout-tip title="一个重要的开发技巧：如何“透视”你的程序？"}
**你**：AI，这太酷了！但有个新问题，为了测试我的`if`判断逻辑对不对，我需要知道那个随机数到底是多少，不然我得猜很多次才能测完。有什么好办法吗？

**AI助手**：你提出了一个所有程序员每天都会面对的问题：**如何观察程序的内部状态？** 这就是“调试”(Debugging)的核心。对于当前的需求，你有两个级别的解决方案：

*   **简单粗暴法**：在你生成随机数后，立刻用`System.out.println()`把它打印出来。这就像在施工时，在墙上用粉笔做个临时标记。
    ```java
    int targetNumber = random.nextInt(100) + 1;
    // 调试代码，发布前应删除或注释掉
    System.out.println("(悄悄告诉你，秘密数字是：" + targetNumber + ")");
    ```

*   **专业工具法**：所有现代AI编程环境（包括Cursor）都内置了强大的**调试器(Debugger)**。它允许你在代码的任意一行设置**断点(Breakpoint)**。当程序以“调试模式”运行到这里时，会自动暂停，届时所有变量的值都将一览无余，你甚至可以控制程序一步一步往下走。

我强烈建议你现在就试着向AI提问：“**如何在Cursor里使用调试器来运行我的Java程序？**” 掌握这个技能，你分析和解决问题的能力将提升一个数量级。
:::

**挑战**：
试着在游戏提示你输入数字时，故意输入一段文字（比如`abc`），然后按下回车。看看你的程序会发生什么？（剧透：它会崩溃！）
你可以就这个“崩溃信息”向AI提问：“我的程序为什么会崩溃？这在Java里叫什么？” 这将是你通往更高级的“异常处理”概念的第一步。
