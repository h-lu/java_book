## 3.2 程序的“十字路口”：if-else语句 {#sec-control-if-else}

> “生存还是毁灭，这是一个问题。” — 莎士比亚，《哈姆雷特》

在上一节，我们和AI一起将“猜数字”游戏分解成了几个核心的技术问题。现在，我们来解决最关键的一个：**程序如何做出“判断”？**

我们的游戏需要根据玩家的猜测，给出“太大”、“太小”或“猜对了”这三种完全不同的反馈。这意味着程序需要在执行的“十字路口”上，根据不同的条件，选择走哪条路。

让我们向AI请教，如何用代码来构建这个“十字路口”。

::: {.callout-note title="与AI的对话：构建判断逻辑"}

**你**：你好AI，根据我们上一节的规划，我现在要实现游戏的核心判断逻辑。我该如何用代码表达“如果玩家的猜测等于秘密数字，就……否则如果太大了，就……否则……”这样的逻辑呢？

**AI助手**：你问到了编程中最核心的控制流程！要实现这个逻辑，你需要使用 **`if-else`** 语句。它就像一个流程图，让你的程序可以根据不同的条件，执行不同的代码块。

要使用它，你首先需要知道如何“提问”。在Java里，我们用**比较运算符**来提问，这些问题只会得到两种答案：`true`（真）或`false`（假）。
*   `playerGuess == secretNumber` （玩家猜的等于秘密数字吗？）
*   `playerGuess > secretNumber` （玩家猜的大于秘密数字吗？）
*   `playerGuess < secretNumber` （玩家猜的小于秘密数字吗？）

现在，我们把这些“问题”和`if-else`结合起来：

```java
// 为了方便演示，我们先假设几个固定的数字
int secretNumber = 42;
int playerGuess = 80;

// 第一个问题：猜对了吗？
if (playerGuess == secretNumber) {
    // 如果回答是 true，就走这条路
    System.out.println("恭喜你，猜对了！");

// 如果第一个问题回答是 false，就来到 else if，提出第二个问题：
} else if (playerGuess > secretNumber) {
    // 如果回答是 true，就走这条路
    System.out.println("太大了！再往小一点猜。");

// 如果以上所有问题都回答是 false，就默认走最后的 else 这条路
} else {
    System.out.println("太小了！再往大一点猜。");
}
```

**你**：我明白了！`if`是第一个判断，`else if`是前一个不成立时的追加判断，`else`是以上所有判断都不成立时的“兜底”选项。

**AI助手**：完全正确！这个 `if - else if - else` 结构，确保了程序在任何情况下，都会且仅会选择一条正确的路径来执行。你已经掌握了赋予程序“大脑”进行决策的关键工具！
:::

### 概念提炼：条件控制

*   **布尔类型 (boolean)**：一种只有两个值（`true` 和 `false`）的数据类型，是所有逻辑判断的基础。
*   **比较运算符**：用于比较两个值，并返回一个`boolean`结果的运算符，如 `==` (等于), `!=` (不等于), `>` (大于), `<` (小于), `>=` (大于等于), `<=` (小于等于)。
*   **`if-else` 语句**：构建条件逻辑的核心。
    *   `if`：如果条件为真，则执行。
    *   `else if`：在前一个`if`或`else if`条件为假时，检查一个新的条件。
    *   `else`：在所有前面的`if`和`else if`条件都为假时，执行。

我们已经解决了“判断”的问题，但游戏还有一个要求：如果没猜对，要让玩家**一直猜下去**。如何让程序“重复”执行一段代码呢？这就是我们下一节要学习的“循环”。

---

### 动手练习

1.  **创建你的判断逻辑**：在一个`main`方法中，创建两个`int`类型的变量：`secretNumber` 和 `playerGuess`。
2.  **赋予初始值**：为 `secretNumber` 设置一个你喜欢的数字（例如，`50`），并为 `playerGuess` 设置另一个不同的数字（例如，`20`）。
3.  **编写 `if-else` 结构**：使用 `if - else if - else` 结构，编写代码来比较 `playerGuess` 和 `secretNumber`。
    *   如果猜对了，打印“猜对了！”。
    *   如果猜大了，打印“太大了！”。
    *   如果猜小了，打印“太小了！”。
4.  **测试所有情况**：手动修改 `playerGuess` 的值，分别测试猜对、猜大、猜小三种情况，确保你的程序能打印出正确的反馈。 