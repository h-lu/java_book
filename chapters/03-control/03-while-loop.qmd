## 3.3 "永不放弃"的循环：while的力量 {#sec-control-while}

> "只要功夫深，铁杵磨成针。"

在上一节，我们的程序学会了使用`if-else`在十字路口“做决策”。但它有点“没耐心”，无论我们猜对还是猜错，程序执行完一次判断就结束了，这根本没法玩！

根据我们的游戏规则，程序应该能让玩家**一直猜，直到猜对为止**。如何才能让程序“不知疲倦”地重复执行我们的判断逻辑呢？这就要用到**循环 (Loop)**。让我们看看AI如何帮我们实现它。

::: {.callout-note title="与AI的对话：构建我们的游戏循环"}

**你**：你好AI，我的判断逻辑写好了，但程序判断一次就退出了。我怎么才能让它重复运行，直到我猜对为止呢？

**AI助手**：这是一个至关重要的问题！要实现“重复”，我们就需要使用**循环**结构。最常用的一种叫做 **`while` 循环**。它就像一个固执的机器人，会不断地重复做一件事，**只要**某个条件保持为真(`true`)。

**你**：听起来很有用。我该怎么用它来搭建我的游戏循环？

**AI助手**：我们可以引入一个布尔变量，比如 `boolean isGameRunning = true;`，把它当作整个游戏的“电源开关”。然后，我们告诉`while`循环：“只要电源开着，就一直重复下面的事”。

在循环内部，我们放入获取玩家输入和`if-else`判断的逻辑。当玩家猜对时，我们就在`if`代码块里，把“电源开关”关掉，也就是 `isGameRunning = false;`。这样，下一次循环开始前，`while`检查到“电源”关了，就会自动结束循环。

**你**：这个思路很清晰！你能帮我把上一节的判断逻辑，用`while`循环包装起来，形成一个完整的游戏核心代码吗？

**AI助手**：没问题！我们把所有部分整合在一起。你需要一个`Scanner`来读取输入，然后用一个`while`循环把所有逻辑包裹起来。

```java
import java.util.Scanner; // 需要引入Scanner工具

public class GuessingGame {
    public static void main(String[] args) {
        int secretNumber = 42; // 我们先用一个固定的秘密数字
        Scanner scanner = new Scanner(System.in);
        
        // 游戏"电源开关"，默认为开
        boolean isGameRunning = true; 

        System.out.println("我已经想好了一个1到100的数字，请你来猜！");

        // 只要开关是开着的，就一直循环
        while (isGameRunning) {
            System.out.print("请输入你的猜测: ");
            int playerGuess = scanner.nextInt();

            // 把之前的判断逻辑放进来
            if (playerGuess > secretNumber) {
                System.out.println("太大了！请再试一次。");
            } else if (playerGuess < secretNumber) {
                System.out.println("太小了！请再试一次。");
            } else {
                System.out.println("恭喜你，猜对了！数字就是 " + secretNumber);
                // 猜对了，关掉"电源开关"，结束循环
                isGameRunning = false; 
            }
        }

        System.out.println("游戏结束！");
        scanner.close(); 
    }
}
```
看，现在你的游戏就可以一直玩下去了！你已经掌握了构建一个有状态、能持续运行的程序的核心技巧。
:::

### 概念提炼：循环控制

*   **循环 (Loop)**：一种能让代码块重复执行的控制结构。
*   **`while` 循环**：循环的一种。它在每次循环开始前检查一个**布尔条件**。只要条件为`true`，循环体内的代码就会被执行。一旦条件变为`false`，循环就结束。
*   **循环控制变量**：通常我们会用一个布尔变量（如`isGameRunning`）来控制循环的开始和结束。在循环内部的某个时刻改变这个变量的值，是终止循环的关键。
*   **死循环 (Infinite Loop)**：如果循环的条件永远为`true`，循环将永远不会停止，程序就会卡住。这是编写循环时需要极力避免的。

我们的游戏离最终完成只差一步了：现在秘密数字是固定的，每次都是42。如何让它每次游戏都**随机**生成一个新数字呢？这正是我们下一节要解决的问题。

---

### 动手练习

1.  **引入`Scanner`**：在你的`main`方法顶部，创建一个`Scanner`对象来读取用户的输入。
2.  **创建循环开关**：定义一个名为 `isGuessed` 的布尔变量，并将其初始值设置为 `false`。
3.  **构建`while`循环**：编写一个`while`循环，循环的条件是 `!isGuessed` (即 `isGuessed` 为 `false` 时继续循环)。
4.  **整合逻辑**：将你上一节编写的 `if-else` 判断逻辑整个移动到 `while` 循环内部。
5.  **获取输入**：在`if-else`逻辑之前，使用`scanner.nextInt()`来获取玩家的猜测，并将其存入`playerGuess`变量。
6.  **关闭开关**：在"猜对了"的那个 `if` 分支中，将 `isGuessed` 设置为 `true`，以确保循环可以在下一次判断时正确退出。
7.  **运行测试**：运行你的程序，尝试多次输入，看看它是否能让你一直猜，直到你猜对为止。 