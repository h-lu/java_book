## 11.1 部署第一步：打个“包裹” - Maven打包 {#sec-deployment-packaging}

> “工欲善其事，必先利其器。”

在我们将应用部署到服务器之前，我们不能直接把一大堆`.java`源代码文件扔上去。我们需要将整个项目，包括我们编写的代码、所有依赖的第三方库（如Spring Boot, H2数据库等），编译并打包成一个**单一的、可执行的文件**。

对于Java世界来说，这个标准的打包格式就是 **JAR (Java ARchive)** 文件。而我们的老朋友Maven，正是完成这个打包任务的“神器”。

### 理解可执行JAR

Spring Boot的Maven插件 (`spring-boot-maven-plugin`) 非常强大，它能生成一个所谓的**“胖JAR” (Fat JAR)** 或 **“可执行JAR” (Executable JAR)**。这意味着：

*   **自包含**：它不仅包含了我们自己写的`.class`文件，还把所有依赖的第三方库（比如`spring-web.jar`, `tomcat-embed-core.jar`等）全部都塞进了这一个JAR文件里。
*   **可执行**：这个JAR文件可以直接通过`java -jar`命令来运行，就像运行一个普通的`.exe`或`.sh`脚本一样。它内置了一个嵌入式的Web服务器（Tomcat），所以我们不再需要在服务器上预先安装和配置一个单独的Tomcat。

这极大地简化了Java应用的部署过程。

### 与AI协同：执行Maven打包命令

::: {.callout-note title="与AI的对话"}

**你：**
“AI，我想把我的Spring Boot项目打包成一个可执行的JAR文件，该怎么做？另外，我经常看到`mvn package`和`mvn install`，它们有什么区别？”

**AI助手：**
“很好的问题！打包非常简单，Maven已经为我们预设好了一切。你只需要在你的项目根目录下，打开终端，然后执行`mvn package`命令即可。

关于`package`和`install`的区别，这是理解Maven生命周期的关键：

*   **`mvn package`**: 它会编译你的代码，运行测试，然后把项目打包成本地的一个文件（比如我们的JAR包），存放**在项目的`target`目录里**。这个包只存在于当前项目中。
*   **`mvn install`**: 它会先做完`package`的所有事情，然后**额外多做一步**：将打包好的文件“安装”到你本地的Maven仓库（通常在你的用户主目录下的`.m2/repository`里）。这样做的好处是，你其他的Maven项目就可以像依赖第三方库一样，直接依赖这个项目了。

对于我们当前只需要部署这个项目的场景来说，**使用`mvn package`就完全足够了**。”
:::

请在**项目根目录**（`pom.xml`文件所在的目录）打开你的终端，然后运行以下命令：

```bash
mvn package
```
或者，你可以使用IDE中Maven管理面板的可视化按钮来执行。

### 解读与验证

1.  **打包**：命令执行成功后，你会在项目根目录下发现一个新的文件夹：`target`。
    *   进入`target`文件夹，你将看到一个名为 `intellirecommend-0.0.1-SNAPSHOT.jar` 的文件。这个名字由你`pom.xml`中的`<artifactId>`和`<version>`决定。

2.  **验证**：现在来验证这个“产品”能否独立运行。
    *   **关键一步**：**请务必先停止你IDE里正在运行的应用！** 否则，新的应用会因为8080端口已被占用而启动失败。
    *   在终端里，`cd`到`target`目录，然后执行：

    ```bash
    java -jar intellirecommend-0.0.1-SNAPSHOT.jar
    ```

    *   你会看到控制台输出了和你在IDE里点击“运行”时一模一样的Spring Boot启动日志。这证明，你的应用正在以“产品”的形式独立运行！

现在，再次打开浏览器访问所有API（包括前端页面 `http://localhost:8080/`），你会发现一切都和以前一样。

我们成功地将应用从“源码”形态转化为了“可交付”形态。下一步，就是为这个交付物，添加安全保护。 