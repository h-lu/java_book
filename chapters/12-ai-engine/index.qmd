---
title: "第十二章：AI推荐引擎 - 教会程序“思考”"
---

> “真正的智能不是知道一切，而是知道在哪里可以找到一切。”

欢迎来到“IntelliRecommend”项目的核心章节！在这一章，我们将真正赋予它智能推荐的能力。

到目前为止，我们已经构建了一个强大的应用框架。但我们的代码中存在一个“坏味道”（Code Smell）：`ContentController`直接调用了`ContentRepository`来处理业务逻辑。在简单的CRUD操作中这没什么问题，但当业务逻辑变得复杂时（比如推荐），Controller就会变得异常臃肿和难以维护。

是时候往这个骨架中注入灵魂，并以一种更专业的方式来组织代码了——我们将引入企业级后端分层架构中的一个重要概念：**Service层**。

::: {.callout-note title="与AI的对话：为何需要Service层？"}
**你**：“AI，为什么我不能把推荐逻辑直接写在Controller里？这样不是更简单吗？”

**AI助手**：“这是一个非常好的问题，触及了软件架构的核心！直接写在Controller里确实简单，但当项目变大时，会带来几个麻烦：

1.  **职责不清**：Controller的主要职责是处理HTTP请求和响应，它应该像个“前台接待”，而不是“业务专家”。
2.  **逻辑无法复用**：如果将来有另一个地方也需要同样的推荐逻辑（比如一个定时任务），你就得复制粘贴代码。
3.  **难以测试**：对Controller进行单元测试很麻烦，因为它和Web层耦合太紧。而一个独立的Service层，可以像普通Java类一样轻松测试。

引入Service层，实现**职责分离**，是保证后端应用长期可维护性的关键一步。”
:::

### 本章学习目标
*   **项目任务**：
    1. 创建一个`RecommendationService`，在其中实现“根据指定内容的类型，推荐其他同类型内容”的业务逻辑。
    2. 创建一个新的API端点 `/api/recommendations?contentId={id}` 来暴露这个推荐功能。
*   **核心概念**：**分层架构**（Controller/Service/Repository）、**依赖注入**（DI）、`@Service`与`@Autowired`注解。
*   **AI协同重点**：学习与AI协作完成一次**重构 (Refactoring)**，将原有的业务逻辑从Controller层迁移到新建的Service层，并创建新的推荐功能。

准备好教会你的程序如何“思考”和“推荐”了吗？让我们开始构建“IntelliRecommend”的大脑吧！ 