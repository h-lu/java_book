## 7.2 团队协作的基石：Git版本控制 {#sec-onboarding-git}

> “唯一不变的是变化本身。” —— 赫拉克利特

在上一节，你成功地创建了 `IntelliRecommend` 项目的骨架。这是一个巨大的进步！但这也带来了一个新的、严峻的问题：如果现在你的电脑硬盘突然损坏，或者你不小心误删了整个项目文件夹，那么所有的努力都将付诸东流。

在个人开发中，你可能会用“复制粘贴”大法来备份项目 (`project_v1.zip`, `project_v2_final.zip`)。但在企业级开发中，我们需要一个更专业、更强大的工具来应对代码变更、版本备份和团队协作的挑战。这个工具，就是 **Git**。

### Git是什么？代码的“时光机”

你可以把Git想象成一台功能极其强大的“代码时光机”：

*   **存档 (Commit)**：每当你完成了一个小功能或修复了一个bug，你可以为当前的项目状态拍摄一张“快照”，我们称之为一次**提交 (Commit)**。你可以为这张快照附上一段描述，说明你“在这一刻做了什么”。
*   **穿梭 (Checkout)**：你可以随时回到过去任何一张“快照”时的项目状态，查看当时的代码。
*   **分支 (Branch)**：你可以从任意一张“快照”开始，开辟一条新的“时间线”，在这条新的时间线上进行实验性的修改，而完全不影响主时间线。这使得多人并行开发和尝试新功能变得安全又简单。
*   **合并 (Merge)**：你可以将不同“时间线”上的修改合并到一起。

**Git是当今软件开发的绝对标准，没有之一。** 掌握Git，是你从“爱好者”迈向“职业开发者”的第一个门槛。

::: {.callout-note title="与AI的对话：为你的项目创建第一个“存档点”"}

**你**：我明白了Git的重要性。现在我想为我的 `IntelliRecommend` 项目启用Git，我该怎么做？

**AI助手**：太棒了。这个过程我们称之为“初始化一个新的Git仓库”。你只需要在你的项目根目录下执行几个简单的命令。

1.  **打开终端**：在你的AI编程环境中，打开一个集成终端。它通常会自动定位到你的项目根目录。
2.  **初始化仓库**：在终端里输入 `git init`。这个命令会在你的项目文件夹里创建一个隐藏的 `.git` 子目录，所有关于这个项目的“历史快照”都会被存放在这里。
3.  **检查状态**：输入 `git status`。这是一个你以后会天天使用的命令，它会告诉你当前项目里有哪些文件被修改了、哪些文件是新增的。你会看到你的 `pom.xml` 和 `src` 目录都处于“未追踪”状态。

**你**：我看到了“未追踪的文件”。现在我该做什么？

**AI助手**：现在你需要告诉Git，你想把哪些文件的当前状态记录到下一次“快照”中。这个操作叫 `git add`。你可以用 `git add .` 来一次性添加当前目录下的所有新文件。

**你**：听起来 `git add` 之后就可以直接“拍照存档”了？为什么要多这么一步？

**AI助手**：你问到了一个关键概念：**暂存区 (Staging Area)**。`git add` 操作并不是直接存档，而是把你指定的文件放入一个“待提交的篮子”（暂存区）。这给了你一次精细控制的机会，比如你这次修改了10个文件，但只想提交其中3个，那你就可以只 `add` 这3个文件。它相当于一个缓冲区，让你在正式拍照前，仔细确认这次要记录在案的都有哪些改动。

:::

### 核心概念提炼

1.  **仓库 (Repository)**：你的项目文件夹，以及其中包含的 `.git` 目录，这就是一个本地代码仓库。
2.  **暂存区 (Staging Area)**：一个介于你的工作目录和仓库历史之间的区域。它是你用来构建下一次提交快照的“准备区”或“篮子”。
3.  **提交 (Commit)**：一次对仓库中文件的永久性“快照”。每一次提交都有一个唯一的ID，并记录了作者、时间和提交信息。

### 动手实践：为你的项目建立版本历史

现在，运用你学到的Git命令，为我们上一节创建的 `IntelliRecommend` 项目，完成第一次代码提交。

**与AI协同的步骤：**

1.  **导航到项目**：在你的终端（命令行）中，使用 `cd IntelliRecommend` 命令进入项目根目录。
2.  **初始化仓库**：执行 `git init` 命令。
3.  **检查状态**：执行 `git status`，亲眼看看Git是如何报告所有“未追踪”的文件的。
4.  **添加所有文件到暂存区**：执行 `git add .` 命令。这里的 `.` 代表“当前目录下的所有内容”。
5.  **再次检查状态**：再次执行 `git status`，观察文件状态的变化，它们现在应该是“等待被提交”的状态了。
6.  **进行第一次提交**：执行 `git commit -m "Initial commit: Set up project structure with Maven"`。`-m` 后面的文字是你对这次提交的简短描述，这是非常重要的团队协作规范。
7.  **验证结果**：
    *   最后一次执行 `git status`，你应该会看到 `nothing to commit, working tree clean` 的信息，这表示你的所有改动都已经被记录在案。
    *   执行 `git log`，你应该能清晰地看到你刚刚完成的第一次提交记录，它包含了你的用户名、邮箱、提交时间和那段描述信息。

看到这个结果，恭喜你！你的项目已经拥有了“时光机”，正式进入了专业的版本控制时代。在下一节，我们将深入了解那个神秘的 `pom.xml` 文件。 