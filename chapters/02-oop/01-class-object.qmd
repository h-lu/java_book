## 2.1 从模板到实体：类与对象 {#sec-oop-class-object}

> "对象，是具体事物的抽象；类，是抽象事物的具体化。"

欢迎来到面向对象的世界！在上一章，我们提到，要解决`main`方法中数据和操作混杂的问题，我们需要进行一次"思维升维"。

现在，让我们直接从本章的微项目——“宠物诊所”——入手，看看“面向对象”是如何解决问题的。我们的第一个任务是为每一只来诊所的宠物创建一张“电子病历卡”。

::: {.callout-note title="与AI的对话：设计你的第一个“类”"}

**你**：你好AI，我要做一个“宠物诊所”的项目。我需要为每一只宠物创建一张病历卡，上面需要记录它的名字、品种和年龄。我该怎么开始呢？

**AI助手**：这是一个完美的面向对象编程的入门场景！如果用传统的方式，你可能需要创建三个独立的列表（一个存名字，一个存品种，一个存年龄），管理起来会非常混乱。

面向对象的思想是，我们不应该分开存储这些信息，因为“名字、品种、年龄”共同描述了一个**实体**——“宠物”。所以，我们应该先创造一个“宠物”的**模板**，这个模板规定了每一只宠物都应该有哪些信息。在Java中，这个模板就叫做**类 (Class)**。

**你**：听起来不错，怎么创建这个“宠物”模板呢？

**AI助手**：很简单，你只需要告诉我这个模板叫什么，以及它需要包含哪些属性。我们来创建一个 `Pet.java` 文件，并定义 `Pet` 类：

```java
// Pet.java

// public class Pet 定义了一个公开的类（模板），名为Pet
public class Pet {

    // 这是模板的第一个属性：名字，用String类型来存储
    String name;

    // 第二个属性：品种，也是String类型
    String breed;
    
    // 第三个属性：年龄，用int类型来存储整数
    int age;
}
```
看，我们现在有了一张"宠物病历卡"的空白模板！

**你**：有了模板，我怎么创建一只具体的宠物，比如一只叫“旺财”的狗？

**AI助手**：问得好！根据模板创造具体实体的过程，叫做**创建对象 (Object)**。你可以把“类”看作是饼干模具，而“对象”就是用这个模具印出来的每一块独一无二的饼干。我们在`main`方法里用`new`关键字来完成：

```java
// 在你的主程序文件中，例如 Clinic.java
public class Clinic {
    public static void main(String[] args) {
        // 1. 根据 Pet 模板，创建一个新的 Pet 对象，并把它存入名为 dog1 的变量中
        Pet dog1 = new Pet();

        // 2. 为这个具体对象的属性赋值
        dog1.name = "旺财";
        dog1.breed = "中华田园犬";
        dog1.age = 3;

        // 3. 我们可以创建另一个完全独立的对象
        Pet cat1 = new Pet();
        cat1.name = "咪咪";
        cat1.breed = "布偶猫";
        cat1.age = 2;
        
        // 4. 打印旺财的信息
        System.out.println("第一只宠物，名字：" + dog1.name + "，品种：" + dog1.breed);
    }
}
```
**你**：我明白了！`Pet`是模板，`dog1`和`cat1`是根据模板创建出来的、两个互相独立的实体。

**AI助手**：完全正确！这就是面向对象编程的第一步：**识别实体，定义模板（类），创建实例（对象）**。
:::

### 概念提炼：类与对象

*   **类 (Class)**：创建对象的**蓝图**或**模板**。它定义了一类事物应该拥有哪些**属性 (Fields)** 和具备哪些**能力 (Methods)**。
*   **对象 (Object)**：根据"类"这个蓝图创造出来的**具体实例**。每个对象都拥有类所定义的属性，但可以有不同的属性值。

我们已经成功创建了对象，但你可能也发现了一个问题：我们可以在`Clinic`类中随意地直接修改`dog1.name`。这在大型项目中是非常危险的。如何保护好对象内部的数据呢？这就是我们下一节要学习的核心概念——**封装**。

---

### 动手练习

1.  **创建你的宠物类**：在你自己的项目中，创建一个新的Java文件，命名为 `Pet.java`。
2.  **定义属性**：在 `Pet.java` 文件中，定义 `Pet` 类，并为它添加三个属性：`String name;`、`String breed;` 和 `int age;`。
3.  **创建主程序**：创建另一个文件，比如 `Clinic.java`，在其中定义 `main` 方法。
4.  **实例化对象**：在 `main` 方法中，至少创建两个不同的 `Pet` 对象（例如，一只狗和一只猫），并为它们的 `name`, `breed`, 和 `age` 属性赋予具体的值。
5.  **打印验证**：使用 `System.out.println()` 打印出你创建的每个宠物对象的至少一个属性，以验证你的代码是否成功。