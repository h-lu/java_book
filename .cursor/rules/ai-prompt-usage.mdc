---
description: 
globs: 
alwaysApply: true
---
# AI提示词使用指南

## 提示词框架概述
本项目使用结构化的提示词框架来确保内容质量和风格一致性。详细模板请参考 [提示词.md](mdc:提示词.md)。

## 主控提示词使用
在开始任何编写会话前，必须首先使用主控提示词建立上下文：

### 应用场景
- 开始新的章节编写
- 切换到新的编写主题
- 重新建立对话上下文时

### 核心要素
- 体现教材的核心理念——"AI协同与企业级项目实战"，学生能够学到的不仅是Java语法，更是现代编程的协作方式
- 设定《Java全栈工程师之路》的背景
- 强调目标读者为编程新手
- 确立AI协同编程的教学理念
- 定义技术作家 + Java架构师 + 编程导师的综合角色

## 章节内容生成提示词

### 使用模板结构
```
我们现在开始编写 **第[章节号]章：[章节标题]** 中的 **第[小节号]节：[小节标题]**。

**本节教学目标：** [1-3个核心学习目标]
**本节项目背景：** [微项目或宏项目任务描述]
```

### 必要组成部分
1. **情景引入**：问题导向的开场
2. **与AI的互动对话**：学生-AI编辑器对话场景
3. **核心概念讲解**：突出Java特性的技术解释
4. **代码实战与逐步完善**：带注释的完整代码示例
5. **动手练习或挑战**：实践性练习题
6. **风格要求**：鼓励性和趣味性

## 代码与示例生成提示词

### 代码质量要求
- **功能明确**：清晰描述需要实现的功能
- **教学性强**：详尽注释，变量名自解释，逐步演进
- **体现Java风格**：标准代码风格和最佳实践
- **上下文适配**：指明代码的使用环境
- **减少代码、强化AI协同**

### 输出格式
- 使用Markdown代码块格式
- 包含语法高亮标记
- 提供运行说明或预期输出

## AI协同对话设计提示词

### 对话场景设计
- **场景背景**：学生遇到的具体困惑或任务
- **对话目标**：通过互动自然引出核心知识点
- **风格要求**：
  - 学生提问：简洁、口语化，符合新手思维
  - AI回答：耐心、启发性，先解决方案后原理解释

### 知识点引入策略
- 使用类比和比喻
- 先给出解决方案再解释原理
- 逐步引导而非直接灌输

## 企业实践与Java特性深化提示词

### 适用主题
- 企业开发流程实践
- Java语言特性深度解析
- 工具链和最佳实践介绍

### 内容结构要求
1. **建立连接**：与当前项目任务的关联性
2. **核心解释**：通俗易懂的概念阐述，善用类比
3. **AI协同体现**：展示AI辅助完成该实践的方法
4. **可行建议**：新手可立即应用的1-2条实践建议

## 审校与优化提示词

### 审查维度
1. **新手友好度**：术语解释、类比恰当性、学习节奏
2. **技术准确性**：代码正确性、概念严谨性
3. **教学效果**：目标清晰性、引入和练习的支撑作用
4. **风格一致性**：AI协同、鼓励性风格的体现
5. **Java特性体现**：是否充分突出Java语言优势

### 使用方法
在完成初稿后，将内容附在审校提示词后，要求AI从多个角度提供具体修改建议。

## 提示词链式使用策略

### 典型工作流程
1. **开始会话**：使用主控提示词建立上下文
2. **生成草稿**：使用章节内容生成提示词
3. **完善代码**：使用代码生成提示词优化示例
4. **设计互动**：使用AI对话设计提示词增加互动元素
5. **深化实践**：使用企业实践提示词添加深度内容
6. **质量保证**：使用审校提示词进行最终优化

### 注意事项
- 保持上下文的连续性
- 根据具体需求调整提示词参数
- 及时反馈和迭代改进内容质量
- 确保所有代码示例的可运行性

## 与Quarto Book的集成
- 生成的内容直接适配.qmd格式
- 代码块支持Quarto的标签和选项
- 对话场景使用Quarto的callout语法
- 交叉引用遵循Quarto规范
